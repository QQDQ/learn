实验1：通过IOC容器创建对象，并为属性赋值★
实验2：根据bean的类型从IOC容器中获取bean的实例★
实验3：通过构造器为bean的属性赋值
实验4：通过index属性指定参数的位置
实验5：通过参数类型注入
实验6：通过p名称空间为bean赋值
实验7：测试使用null值
实验8：引用其他bean★
实验9：引用内部bean
实验10：使用List类型的集合属性
实验11：使用Map类型的集合属性
实验12：使用prop子元素为Properties类型的属性赋值
实验13：通过util名称空间创建集合类型的bean
实验14：给bean的级联属性赋值
实验15：配置通过静态工厂方法创建的bean
实验16：配置通过实例工厂方法创建的bean
实验17：配置FactoryBean
实验18：通过继承实现bean配置信息的重用
实验19：通过abstract属性创建一个模板bean
实验20：bean之间的依赖
实验21：测试bean的作用域，分别创建单实例和多实例的bean★
实验22：创建带有生命周期方法的bean
实验23：测试bean的后置处理器
实验24：引用外部属性文件★
实验25：基于XML的自动装配
实验26：[SpEL测试I]在SpEL中使用字面量
实验27：[SpEL测试II]在SpEL中引用其他bean
实验28：[SpEL测试III]在SpEL中引用其他bean的某个属性值
实验29：[SpEL测试IV]在SpEL中调用非静态方法
实验30：[SpEL测试V]在SpEL中调用静态方法
实验31：[SpEL测试VI]在SpEL中使用运算符
实验32：通过注解分别创建Dao、Service、Controller★
实验33：使用context:include-filter指定扫描包时要包含的类
实验34：使用context:exclude-filter指定扫描包时不包含的类
实验35：使用@Autowired注解实现根据类型实现自动装配★
实验36：如果资源类型的bean不止一个，默认根据@Autowired注解标记的成员变量名作为id查找bean，进行装配★
实验37：如果根据成员变量名作为id还是找不到bean，可以使用@Qualifier注解明确指定目标bean的id★
实验38：在方法的形参位置使用@Qualifier注解
实验39：@Autowired注解的required属性指定某个属性允许不被设置
实验40：测试泛型依赖注入★






