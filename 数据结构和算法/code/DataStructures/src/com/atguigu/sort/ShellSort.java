package com.atguigu.sort;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class ShellSort {

	public static void main(String[] args) {
		int[] arr = { 8, 9, 1, 7, 2, 3, 5, 4, 6, 0 };
		System.out.println("排序前");
		System.out.println(Arrays.toString(arr));

		 shellSort0(arr); // 交换式 推导过程
//		shellSort1(arr); // 交换式 整理
		// shellSort2(arr);// 希尔 插入排序 推导过程
//		 shellSort3(arr);// 希尔排序整理

		System.out.println("排序后");
		System.out.println(Arrays.toString(arr));

		// 创建要给80000个的随机的数组
		// int[] arr = new int[8000000];
		// for (int i = 0; i < 8000000; i++) {
		// arr[i] = (int) (Math.random() * 8000000); // 生成一个[0, 8000000) 数
		// }
		//
		// System.out.println("排序前");
		// Date data1 = new Date();
		// SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd
		// HH:mm:ss");
		// String date1Str = simpleDateFormat.format(data1);
		// System.out.println("排序前的时间是=" + date1Str);
		//
		// // shellSort0(arr); //交换式 推导过程
		// // shellSort1(arr);// 希尔 交换式 整理
		// // shellSort2(arr);//希尔 插入排序 推导过程
		// shellSort3(arr);// 希尔排序整理
		//
		// Date data2 = new Date();
		// String date2Str = simpleDateFormat.format(data2);
		// System.out.println("排序前的时间是=" + date2Str);

	}

	// 效率比直接插入排序还要慢很多 当中用了交换
	public static void shellSort0(int[] arr) {
		int temp = 0;

		// 希尔排序的第1轮排序
		// 因为第1轮排序，是将10个数据分成了 5组
		for (int i = 5; i < arr.length; i++) {
			// 遍历各组中所有的元素(共5组，每组有2个元素), 步长5
			for (int j = i - 5; j >= 0; j -= 5) {
				// 如果当前元素大于加上步长后的那个元素，说明交换
				if (arr[j] > arr[j + 5]) {
					temp = arr[j];
					arr[j] = arr[j + 5];
					arr[j + 5] = temp;
				}
			}
		}

		System.out.println("希尔 交换1轮后=" + Arrays.toString(arr));//

		// 希尔排序的第2轮排序
		// 因为第2轮排序，是将10个数据分成了 5/2 = 2组
		for (int i = 2; i < arr.length; i++) {
			// 遍历各组中所有的元素(共2组，每组有5个元素), 步长2
			for (int j = i - 2; j >= 0; j -= 2) {
				// 如果当前元素大于加上步长后的那个元素，说明交换
				if (arr[j] > arr[j + 2]) {
					temp = arr[j];
					arr[j] = arr[j + 2];
					arr[j + 2] = temp;
				}
			}
		}

		System.out.println("希尔 交换2轮后=" + Arrays.toString(arr));//

		// 希尔排序的第3轮排序
		// 因为第3轮排序，是将10个数据分成了 2/2 = 1组
		for (int i = 1; i < arr.length; i++) {
			// 遍历各组中所有的元素(共1组，每组有10个元素), 步长1
			for (int j = i - 1; j >= 0; j -= 1) {
				// 如果当前元素大于加上步长后的那个元素，说明交换
				if (arr[j] > arr[j + 1]) {
					temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}

		System.out.println("希尔 交换3轮后=" + Arrays.toString(arr));//

	}

	// 使用逐步推导的方式来编写希尔排序
	// 希尔排序时， 对有序序列在插入时采用交换法,
	// 思路(算法) ===> 代码
	public static void shellSort1(int[] arr) {

		int temp = 0;
		int count = 0;
		// 根据前面的逐步分析，使用循环处理
		for (int gap = arr.length / 2; gap > 0; gap /= 2) {
			for (int i = gap; i < arr.length; i++) {
				// 遍历各组中所有的元素(共gap组，每组有个元素), 步长gap
				for (int j = i - gap; j >= 0; j -= gap) {
					// 如果当前元素大于加上步长后的那个元素，说明交换
					if (arr[j] > arr[j + gap]) {
						temp = arr[j];
						arr[j] = arr[j + gap];
						arr[j + gap] = temp;
					}
				}
			}
			System.out.println("希尔 交换第" + (++count) + "轮 =" + Arrays.toString(arr));
		}

	}

	//
	public static void shellSort2(int[] arr) {

		// 希尔排序的第1轮排序
		// 因为第1轮排序，是将10个数据分成了 5组(0,5)(1,6)(2,7)(3,8)(4,9) 每一组进行直接排序
		for (int i = 5; i < arr.length; i++) {

			int insertVal = arr[i];
			int insertIndex = i - 5; // 即arr[5]的前面这个数的下标
			while (insertIndex >= 0 && insertVal < arr[insertIndex]) {
				arr[insertIndex + 5] = arr[insertIndex];// arr[insertIndex]
				insertIndex -= 5;
			}
			// 当退出while循环时，说明插入的位置找到, insertIndex + 5
			arr[insertIndex + 5] = insertVal;

		}

		System.out.println("希尔排序1轮后=" + Arrays.toString(arr));//

		// 希尔排序的第2轮排序
		// 因为第2轮排序，是将10个数据分成了 5/2 = 2组(0,2,4,6,8)(1,3,5,7,9)每一组进行直接排序
		for (int i = 2; i < arr.length; i++) {

			int insertVal = arr[i];
			int insertIndex = i - 2; // 即arr[2]的前面这个数的下标
			while (insertIndex >= 0 && insertVal < arr[insertIndex]) {
				arr[insertIndex + 2] = arr[insertIndex];// arr[insertIndex]
				insertIndex -= 2;
			}
			// 当退出while循环时，说明插入的位置找到, insertIndex + 2
			arr[insertIndex + 2] = insertVal;
		}

		System.out.println("希尔排序2轮后=" + Arrays.toString(arr));//

		// 希尔排序的第3轮排序
		// 因为第3轮排序，是将10个数据分成了 2/2 = 1组
		for (int i = 1; i < arr.length; i++) {
			int insertVal = arr[i];
			int insertIndex = i - 1; // 即arr[1]的前面这个数的下标
			while (insertIndex >= 0 && insertVal < arr[insertIndex]) {
				arr[insertIndex + 1] = arr[insertIndex];// arr[insertIndex]
				insertIndex -= 1;
			}
			// 当退出while循环时，说明插入的位置找到, insertIndex + 1
			arr[insertIndex + 1] = insertVal;
		}

		System.out.println("希尔排序3轮后=" + Arrays.toString(arr));//

	}

	public static void shellSort3(int[] arr) {

		for (int gap = arr.length / 2; gap > 0; gap /= 2) {
			for (int i = gap; i < arr.length; i++) {

				int insertVal = arr[i];
				int insertIndex = i - gap; // 即arr[gap]的前面这个数的下标
				while (insertIndex >= 0 && insertVal < arr[insertIndex]) {
					arr[insertIndex + gap] = arr[insertIndex];// arr[insertIndex]
					insertIndex -= gap;
				}
				// 当退出while循环时，说明插入的位置找到, insertIndex + gap
				arr[insertIndex + gap] = insertVal;
			}
			System.out.println("希尔排序 间隔为" + gap + "后 =" + Arrays.toString(arr));
		}

	}

}
